from django.db import models
from django.db.models.functions import Concat
from drf_yasg.utils import swagger_auto_schema
from rest_framework import status
from rest_framework.response import Response
from rest_framework.validators import ValidationError
from rest_framework.views import APIView

from apps.accounting.choices import MonthlyPaymentTypes
from apps.accounting.filters import (DATE_RANGE_FILTER_PARAMETERS,
                                     MonthlyPaymentFilter)
from apps.accounting.models import MonthlyPayment
from apps.organizations.choices import OrganizationTypes
from apps.users.choices import UserTypes
from apps.users.permissions import IsAdminUser


class LPad(models.Func):
    # Custom function to make sure the month is always 2 digits: 01, 02, 03, ..., 12
    # NOTE: it is generated by the ChatGPT-4.0 model
    function = "LPAD"
    template = "%(function)s(CAST(%(expressions)s as TEXT), 2, '0')"


class MonthlyIncomeListAPIView(APIView):
    permission_classes = (IsAdminUser,)

    @swagger_auto_schema(manual_parameters=DATE_RANGE_FILTER_PARAMETERS)
    def get(self, request, *args, **kwargs):

        # check if from_date filter exist in the request query parameters
        from_date = request.query_params.get("from_date")
        if not from_date:
            raise ValidationError(
                code="required",
                detail={"from_date": "from_date filter is required in the query parameters"},
            )

        # filter the monthly_payments queryset
        monthly_payments = MonthlyPayment.objects.filter(type=MonthlyPaymentTypes.TUITION_FEE)
        monthly_payments = MonthlyPaymentFilter(request.query_params, queryset=monthly_payments).qs

        # annotate extra helper field to the queryset
        # this field will be used to group the queryset by year-month
        monthly_payments = monthly_payments.annotate(
            year_month=Concat(
                models.F("paid_month__year"),
                models.Value("-"),
                LPad(models.F("paid_month__month")),
                # models.F("paid_month__month"),
                output_field=models.CharField(),
            ),
        )

        # group the queryset by year-month and sum the amount
        # for school fees
        school_income = (
            monthly_payments.filter(
                user__type=UserTypes.STUDENT,
            )
            .values("year_month")
            .annotate(total=models.Sum("amount"))
            .annotate(organization_type=models.Value(OrganizationTypes.SCHOOL, output_field=models.CharField()))
        )
        # for kindergarten fees
        kindergarten_income = (
            monthly_payments.filter(
                user__type=UserTypes.KINDERGARTENER,
            )
            .values("year_month")
            .annotate(total=models.Sum("amount"))
            .annotate(organization_type=models.Value(OrganizationTypes.KINDERGARTEN, output_field=models.CharField()))
        )

        # combine the two queryset
        data = list(school_income) + list(kindergarten_income)
        # order the list by year-month
        data = sorted(data, key=lambda x: x["year_month"])

        return Response(data, status=status.HTTP_200_OK)


__all__ = ["MonthlyIncomeListAPIView"]
